/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.doctor;

import java.awt.CardLayout;
import static java.awt.event.KeyEvent.VK_BACK_SPACE;
import static java.awt.event.KeyEvent.VK_DELETE;
import static java.awt.image.ImageObserver.HEIGHT;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.CityDirectory;
import model.Doctor;
import model.Encounter;
import model.EncounterHistory;
import model.MainSystem;
import model.Patient;
import model.VitalSign;

/**
 *
 * @author adeda
 */
public class RecordEncounter extends javax.swing.JPanel {

    /**
     * Creates new form RecordEncounter
     */
    JPanel aPanel;
    CityDirectory allCities;
    Doctor attendingDoctor;
    Patient aPatient;
    private MainSystem mainSystem;
    private String previousCard;

    public RecordEncounter(MainSystem mainSystem) {
        initComponents();
        this.mainSystem = mainSystem;
        this.aPanel = mainSystem.getaPanel();
        this.attendingDoctor = mainSystem.getADoctor();
        this.allCities = mainSystem.getAllCities();
        this.aPatient = mainSystem.getaPatient();
        this.previousCard = String.valueOf(aPanel.findComponentAt(0, 0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        temperatureLabel = new javax.swing.JLabel();
        pulseLabel = new javax.swing.JLabel();
        complaintLabel = new javax.swing.JLabel();
        complaintField = new javax.swing.JTextField();
        diagnosisLabel = new javax.swing.JLabel();
        diagnosisField = new javax.swing.JTextField();
        prescriptionLabel = new javax.swing.JLabel();
        prescriptionField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        temperatureField = new javax.swing.JTextField();
        errorLabel = new javax.swing.JLabel();
        pulseField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Enter Encounter");

        dateLabel.setText("Date");

        temperatureLabel.setText("Temperature");

        pulseLabel.setText("Pulse Rate");

        complaintLabel.setText("Complaint");

        diagnosisLabel.setText("Diagnosis");

        prescriptionLabel.setText("Prescription");

        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        temperatureField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                temperatureFieldFocusLost(evt);
            }
        });
        temperatureField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                temperatureFieldKeyPressed(evt);
            }
        });

        errorLabel.setForeground(new java.awt.Color(255, 51, 51));

        pulseField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pulseFieldFocusLost(evt);
            }
        });
        pulseField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulseFieldActionPerformed(evt);
            }
        });
        pulseField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pulseFieldKeyPressed(evt);
            }
        });

        jLabel1.setText("Â°C");

        jLabel2.setText("bpm");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(396, 396, 396)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(complaintLabel)
                                .addGap(138, 138, 138)
                                .addComponent(complaintField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(diagnosisField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(temperatureLabel)
                                        .addComponent(pulseLabel))
                                    .addGap(115, 115, 115)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(temperatureField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(pulseField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(prescriptionLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(prescriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(diagnosisLabel)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(98, 98, 98)
                                    .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 6, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(60, 60, 60))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(350, 350, 350))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(temperatureLabel)
                    .addComponent(temperatureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pulseLabel)
                    .addComponent(pulseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(complaintLabel)
                    .addComponent(complaintField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(diagnosisLabel)
                    .addComponent(diagnosisField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prescriptionLabel)
                    .addComponent(prescriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if (validateSave()) {
//            Encounter encounter = new Encounter();
//            VitalSign vitalSign = new VitalSign();
//            EncounterHistory allEncounters = aPatient.getAllEncounter();
//            
//            vitalSign.setPulseRate(Integer.parseInt(pulseField.getText()));
//            vitalSign.setTemperature(Float.parseFloat(temperatureField.getText()));
//
//            encounter.setAttendingDoc(attendingDoctor.getFirstName() + " " + attendingDoctor.getLastName());
////            encounter.setAttendingDoc(getAttendingDoctor());
//            encounter.setComplaint(complaintField.getText());
//            encounter.setDiagnosis(diagnosisField.getText());
//            encounter.setPrescription(prescriptionField.getText());
//            encounter.setVitalSigns(vitalSign);
//            encounter.setVisitDate(dateChooser.getDate());
//            try {
//                allEncounters.addEncounter(encounter);
//                aPatient.setAllEncounter(allEncounters);
//                
//            } catch (NullPointerException e) {
//                EncounterHistory newAllEncounters = new EncounterHistory();
//                newAllEncounters.addEncounter(encounter);
//                aPatient.setAllEncounter(newAllEncounters);
//            }
//            mainSystem.setaPatient(aPatient);
            DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
            String dt = fmt.format(dateChooser.getDate());
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/all_patients", "root", "Info5100");

                String sql = "insert into pat_" + mainSystem.getPatientID() + "_enchistory values (?,?,?,?,?,?,?)";
                PreparedStatement ptst = conn.prepareStatement(sql);

                ptst.setString(1, dt);
                ptst.setString(2, temperatureField.getText());
                ptst.setString(3, pulseField.getText());
                ptst.setString(4, getAttendingDoctor());
                ptst.setString(5, complaintField.getText());
                ptst.setString(6, diagnosisField.getText());
                ptst.setString(7, prescriptionField.getText());

                ptst.executeUpdate();
                conn.close();
                JOptionPane.showMessageDialog(aPanel, "Encounter Saved Successfully.", "Success", HEIGHT);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, "sjkd", HEIGHT);
            }

            if (previousCard.contains("AddPatient")) {
                DoctorDashboard dashboard = new DoctorDashboard(mainSystem);
                aPanel.add(dashboard);
                CardLayout layout = (CardLayout) aPanel.getLayout();
                layout.next(aPanel);
            } else {
                ViewEncounters viewEncounter = new ViewEncounters(mainSystem);
                aPanel.add(viewEncounter);
                CardLayout layout = (CardLayout) aPanel.getLayout();
                layout.next(aPanel);
            }

        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void temperatureFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_temperatureFieldFocusLost
        // TODO add your handling code here:
        errorLabel.setText("");
    }//GEN-LAST:event_temperatureFieldFocusLost

    private void temperatureFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_temperatureFieldKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (temperatureField.getText().length() == 4 && (c != VK_BACK_SPACE) && (c != VK_DELETE)) {
            temperatureField.setEditable(false);
            errorLabel.setText("Please enter no more than 4 digits");
        } else if (!(Character.isDigit(c) | (c == '.')) && (c != VK_BACK_SPACE) && (c != VK_DELETE)) {
            temperatureField.setEditable(false);
            errorLabel.setText("Please enter numbers only.");
        } else {
            temperatureField.setEditable(true);
        }
    }//GEN-LAST:event_temperatureFieldKeyPressed

    private void pulseFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pulseFieldFocusLost
        // TODO add your handling code here:
//        errorLabel.setText("");
    }//GEN-LAST:event_pulseFieldFocusLost

    private void pulseFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pulseFieldKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (pulseField.getText().length() == 3 && (c != VK_BACK_SPACE) && (c != VK_DELETE)) {
            pulseField.setEditable(false);
            errorLabel.setText("Please enter no more than 3 digits");
        } else if (!Character.isDigit(c) && (c != VK_BACK_SPACE) && (c != VK_DELETE)) {
            pulseField.setEditable(false);
            errorLabel.setText("Please enter numbers only.");
        } else {
            pulseField.setEditable(true);
        }
    }//GEN-LAST:event_pulseFieldKeyPressed

    private void pulseFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pulseFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pulseFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField complaintField;
    private javax.swing.JLabel complaintLabel;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextField diagnosisField;
    private javax.swing.JLabel diagnosisLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField prescriptionField;
    private javax.swing.JLabel prescriptionLabel;
    private javax.swing.JTextField pulseField;
    private javax.swing.JLabel pulseLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField temperatureField;
    private javax.swing.JLabel temperatureLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

    private boolean validateSave() {
        boolean b = false;
        try {
            DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
            String dt = fmt.format(dateChooser.getDate());

            if (temperatureField.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(aPanel, "Please enter patient's temperature", "Error", HEIGHT);
                temperatureField.requestFocus();
            } else if (Float.parseFloat(temperatureField.getText()) > 42 | Float.parseFloat(temperatureField.getText()) < 35) {
                JOptionPane.showMessageDialog(aPanel, "Please enter temperature between 35Â°C and 42Â°C", "Error", HEIGHT);
                temperatureField.requestFocus();
            } else if (pulseField.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(aPanel, "Please enter patient's pulse rate", "Error", HEIGHT);
                pulseField.requestFocus();
            } else if ((Integer.parseInt(pulseField.getText()) > 220) | (Integer.parseInt(pulseField.getText()) < 30)) {
                JOptionPane.showMessageDialog(aPanel, "Please pulse rate between 30bpm and 220bpm", "Error", HEIGHT);
                pulseField.requestFocus();
            } else if (complaintField.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(aPanel, "Please enter patient's complains", "Error", HEIGHT);
                complaintField.requestFocus();
            } else if (diagnosisField.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(aPanel, "Please enter patient's diagnosis", "Error", HEIGHT);
                diagnosisField.requestFocus();
            } else if (prescriptionField.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(aPanel, "Please enter patient's prescription", "Error", HEIGHT);
                prescriptionField.requestFocus();
            } else {
                b = true;
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(aPanel, "Please enter a date", "Error", HEIGHT);

        }
        return b;

    }

    private String getAttendingDoctor() {
        String name = null;
        if (!(mainSystem.getDocID().equals("System Admin")) 
                & !(mainSystem.getDocID().equals("Community Admin"))) {

            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hms", "root", "Info5100");

                String sql = "select * from doctorsdirectory where ID = '" + mainSystem.getDocID() + "'";

                PreparedStatement ptst = conn.prepareStatement(sql);
                ResultSet rs = ptst.executeQuery();
                rs.next();
                name = rs.getString("FirstName") + " " + rs.getString("LastName");
                conn.close();

            } catch (Exception e) {
//            JOptionPane.showMessageDialog(rootPane, e, "sjkd", HEIGHT);
//            System.out.println(e);

            }
        } else {
            name = mainSystem.getDocID();
        }            

        return name;
    }
}
