/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.admin;

import java.awt.CardLayout;
import static java.awt.image.ImageObserver.HEIGHT;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import view.doctor.RecordEncounter;
import model.MainSystem;

/**
 *
 * @author adeda
 */
public class ViewCities extends javax.swing.JPanel {

    /**
     * Creates new form ViewCities
     */
    MainSystem mainSystem;
    private JPanel aPanel;

    public ViewCities(MainSystem mainSystem) {
        initComponents();
        this.mainSystem = mainSystem;
        this.aPanel = mainSystem.getaPanel();

        updateButton.setEnabled(false);
        populateTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cityTable = new javax.swing.JTable();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        viewButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("All Cities");

        cityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(cityTable);
        if (cityTable.getColumnModel().getColumnCount() > 0) {
            cityTable.getColumnModel().getColumn(0).setResizable(false);
        }

        nameLabel.setText("Name");

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(backButton)
                        .addGap(208, 208, 208)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(273, 273, 273)
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(122, 122, 122)
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(242, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(158, 158, 158)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(400, 400, 400))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(432, 432, 432))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(319, 319, 319)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(640, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewButton)
                    .addComponent(deleteButton))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(addButton)
                .addGap(50, 50, 50))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(496, Short.MAX_VALUE)
                    .addComponent(updateButton)
                    .addGap(51, 51, 51)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:

        if (validateAddition()) {

            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hms", "root", "Info5100");

                String sql = "insert into citydirectory (Name)"
                        + " values (?)";
                PreparedStatement ptst = conn.prepareStatement(sql);

                ptst.setString(1, nameField.getText());

                ptst.executeUpdate();

                Connection conn2 = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/community_directory", "root", "Info5100");

                String tableName = nameField.getText().replaceAll("[^a-zA-Z0-9]+", "_") + "_communities";
                String sql2 = "CREATE TABLE " + tableName + " ("
                        + "Name VARCHAR(255) NOT NULL,"
                        + "PostalCode VARCHAR(255),"
                        + "PRIMARY KEY (Name),"
                        + "UNIQUE (Name)"
                        + ")";
                PreparedStatement ptst2 = conn2.prepareStatement(sql2);
                ptst2.executeUpdate();
                JOptionPane.showMessageDialog(this, "City created successfully!", "Success", HEIGHT);
                clearFields();
                populateTable();
                conn.close();

            } catch (java.sql.SQLIntegrityConstraintViolationException e) {
                JOptionPane.showMessageDialog(this, "City already exists", "Success", HEIGHT);

            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = cityTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select city to delete.", "Error", HEIGHT);
        } else {
            try {
                String selectedDoc = String.valueOf(cityTable.getValueAt(selectedIndex, 0));
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hms", "root", "Info5100");

                String sql = "delete from citydirectory where Name= '" + selectedDoc + "'";
                PreparedStatement ptst = conn.prepareStatement(sql);
                ptst.executeUpdate();
                Connection conn2 = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/community_directory", "root", "Info5100");

                String sql2 = "DROP TABLE " + selectedDoc.replaceAll("[^a-zA-Z0-9]+", "_") + "_communities";
                PreparedStatement ptst2 = conn2.prepareStatement(sql2);
                ptst2.executeUpdate();
                JOptionPane.showMessageDialog(this, "City deleted successfully", "Success", HEIGHT);

                populateTable();

                conn.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, "sjkd", HEIGHT);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = cityTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select city to view.", "Error", HEIGHT);
        } else {

            updateButton.setEnabled(true);
            addButton.setEnabled(false);
            deleteButton.setEnabled(false);
            backButton.setEnabled(false);
            cityTable.setRowSelectionAllowed(false);
            String id = String.valueOf(cityTable.getValueAt(selectedIndex, 0));

            mainSystem.setPatientID(id);
            nameField.setText(id);
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = cityTable.getSelectedRow();

        if (validateUpdate()) {

            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hms", "root", "Info5100");

                String sql = "update citydirectory set Name = '" + nameField.getText()
                        + "' where Name = '" + mainSystem.getPatientID() + "'";
                PreparedStatement ptst = conn.prepareStatement(sql);
                ptst.execute();
                Connection conn2 = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/community_directory", "root", "Info5100");

                String query = "ALTER TABLE " + mainSystem.getPatientID().replaceAll("[^a-zA-Z0-9]+", "_")
                        + "_communities RENAME TO " + nameField.getText().replaceAll("[^a-zA-Z0-9]+", "_") + "_communities";

                Statement stmt = conn2.createStatement();
                stmt.executeUpdate(query);
                conn.close();
                JOptionPane.showMessageDialog(this, "City's details updated successfully.", "Success", HEIGHT);

            } catch (Exception e) {
//            JOptionPane.showMessageDialog(rootPane, e, "sjkd", HEIGHT);
                System.out.println(e);
            }
            populateTable();
            updateButton.setEnabled(false);
            addButton.setEnabled(true);
            deleteButton.setEnabled(true);
            backButton.setEnabled(true);

            cityTable.setRowSelectionAllowed(true);
            clearFields();
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        SystemAdminDashboard dashboard = new SystemAdminDashboard(mainSystem);
        aPanel.add(dashboard);
        CardLayout layout = (CardLayout) aPanel.getLayout();
        layout.next(aPanel);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTable cityTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables

    private boolean validateAddition() {
        boolean b = false;
        if (nameField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter city name", "Error", HEIGHT);
            nameField.requestFocus();
        } else {
            b = true;
        }
        return b;
    }

    private void populateTable() {

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hms", "root", "Info5100");

            String sql = "select * from citydirectory";

            PreparedStatement ptst = conn.prepareStatement(sql);
            ResultSet rs = ptst.executeQuery();
            DefaultTableModel model = (DefaultTableModel) cityTable.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                Object o[] = {rs.getString("Name")};
                model.addRow(o);
            }

            conn.close();

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(rootPane, e, "sjkd", HEIGHT);
            System.out.println(e);

        }
    }

    private boolean validateUpdate() {
        boolean b = false;
        if (nameField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please enter city name", "Error", HEIGHT);
            nameField.requestFocus();
        } else {
            b = true;
        }
        return b;
    }

    private void clearFields() {

        nameField.setText("");
    }
}
