/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.admin;

import java.awt.CardLayout;
import static java.awt.image.ImageObserver.HEIGHT;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.CityDirectory;
import model.Community;
import model.CommunityDirectory;
import model.MainSystem;

/**
 *
 * @author adeda
 */
public class ViewCommunity extends javax.swing.JPanel {

    /**
     * Creates new form ViewCommunity
     */
    private MainSystem mainSystem;
    private JPanel aPanel;

    public ViewCommunity(MainSystem mainSystem) {
        initComponents();

        this.mainSystem = mainSystem;
        this.aPanel = mainSystem.getaPanel();
        populateCityMenu();
        setLabel();
        populateTable();
        updateButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        communityTable = new javax.swing.JTable();
        titleLabel = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        communityLabel = new javax.swing.JLabel();
        postalCodeLabel = new javax.swing.JLabel();
        viewButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        cityMenu = new javax.swing.JComboBox<>();
        communityField = new javax.swing.JTextField();
        postalCodeField = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        communityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Postal Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(communityTable);
        if (communityTable.getColumnModel().getColumnCount() > 0) {
            communityTable.getColumnModel().getColumn(0).setResizable(false);
            communityTable.getColumnModel().getColumn(1).setResizable(false);
        }

        titleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("All Communities");

        cityLabel.setText("City");

        communityLabel.setText("Community");

        postalCodeLabel.setText("Postal Code");

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        cityMenu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cityMenuItemStateChanged(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(326, 326, 326))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(communityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(postalCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(116, 116, 116)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(communityField, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(postalCodeField, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(cityMenu, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(304, 304, 304)
                        .addComponent(viewButton)
                        .addGap(227, 227, 227)
                        .addComponent(deleteButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(329, 329, 329)
                .addComponent(updateButton)
                .addGap(194, 194, 194)
                .addComponent(addButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewButton)
                    .addComponent(deleteButton))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(communityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(communityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postalCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postalCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(addButton))
                .addContainerGap(9, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cityMenuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cityMenuItemStateChanged
        // TODO add your handling code here:
        try {
            populateTable();
            setLabel();
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_cityMenuItemStateChanged

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:

        int selectedIndex = communityTable.getSelectedRow();

        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(aPanel, "Please select community to view.", "Error", HEIGHT);
        } else {
            updateButton.setEnabled(true);
            addButton.setEnabled(false);

            communityTable.setRowSelectionAllowed(false);
            String id = String.valueOf(communityTable.getValueAt(selectedIndex, 0));

            mainSystem.setPatientID(id);
            communityField.setText(id);
            postalCodeField.setText(String.valueOf(communityTable.getValueAt(selectedIndex, 1)));

            cityMenu.setEnabled(false);
            viewButton.setEnabled(false);
            backButton.setEnabled(false);
            deleteButton.setEnabled(false);
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:

        if (validateUpdate()) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/community_directory", "root", "Info5100");

                String tableName = String.valueOf(cityMenu.getSelectedItem()).replaceAll("[^a-zA-Z0-9]+", "_")
                        + "_communities";
                String sql = "update " + tableName + " set Name = '" + communityField.getText()
                        + "', PostalCode = '" + postalCodeField.getText()
                        + "' where Name = '" + mainSystem.getPatientID() + "'";
                PreparedStatement ptst = conn.prepareStatement(sql);
                ptst.execute();

                Connection conn2 = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital_directory", "root", "Info5100");

                String query = "ALTER TABLE " + mainSystem.getPatientID().replaceAll("[^a-zA-Z0-9]+", "_")
                        + "_hospitals RENAME TO " + communityField.getText().replaceAll("[^a-zA-Z0-9]+", "_") + "_hospitals";

                Statement stmt = conn2.createStatement();
                stmt.executeUpdate(query);
                conn.close();
                JOptionPane.showMessageDialog(this, "Community's details updated successfully.", "Success", HEIGHT);

            } catch (Exception e) {
//            JOptionPane.showMessageDialog(rootPane, e, "sjkd", HEIGHT);
                System.out.println(e);
            }
            populateTable();

            updateButton.setEnabled(false);
            addButton.setEnabled(true);
            viewButton.setEnabled(true);
            cityMenu.setEnabled(true);
            communityTable.setRowSelectionAllowed(true);
            clearFields();
            backButton.setEnabled(true);
            deleteButton.setEnabled(true);

        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if (validateAddition()) {

            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/community_directory", "root", "Info5100");

                String tableName = String.valueOf(cityMenu.getSelectedItem()).replaceAll("[^a-zA-Z0-9]+", "_")
                        + "_communities";

                String sql = "insert into " + tableName + " (Name, PostalCode)"
                        + " values (?,?)";
                PreparedStatement ptst = conn.prepareStatement(sql);

                ptst.setString(1, communityField.getText());
                ptst.setString(2, postalCodeField.getText());

                ptst.executeUpdate();

                Connection conn2 = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital_directory", "root", "Info5100");

                String tableName2 = communityField.getText().replaceAll("[^a-zA-Z0-9]+", "_") + "_hospitals";
                String sql2 = "CREATE TABLE " + tableName2 + " ("
                        + "Name VARCHAR(255) NOT NULL,"
                        + "Address VARCHAR(255),"
                        + "PRIMARY KEY (Name),"
                        + "UNIQUE (Name)"
                        + ")";
                PreparedStatement ptst2 = conn2.prepareStatement(sql2);
                ptst2.executeUpdate();
                JOptionPane.showMessageDialog(this, "Community created successfully!", "Success", HEIGHT);
                clearFields();
                populateTable();
                conn.close();

            } catch (java.sql.SQLIntegrityConstraintViolationException e) {
                JOptionPane.showMessageDialog(this, "Community already exists", "Success", HEIGHT);

            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        SystemAdminDashboard dashboard = new SystemAdminDashboard(mainSystem);
        aPanel.add(dashboard);
        CardLayout layout = (CardLayout) aPanel.getLayout();
        layout.next(aPanel);
    }//GEN-LAST:event_backButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:

        int selectedIndex = communityTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select community to delete.", "Error", HEIGHT);
        } else {
            try {
                String selectedDoc = String.valueOf(communityTable.getValueAt(selectedIndex, 0));
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/community_directory", "root", "Info5100");

                String tableName = String.valueOf(cityMenu.getSelectedItem()).replaceAll("[^a-zA-Z0-9]+", "_")
                        + "_communities";
                String sql = "delete from " + tableName + " where Name= '" + selectedDoc + "'";
                PreparedStatement ptst = conn.prepareStatement(sql);
                ptst.executeUpdate();

                Connection conn2 = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hospital_directory", "root", "Info5100");

                String sql2 = "DROP TABLE " + selectedDoc.replaceAll("[^a-zA-Z0-9]+", "_") + "_hospitals";
                PreparedStatement ptst2 = conn2.prepareStatement(sql2);
                ptst2.executeUpdate();
                JOptionPane.showMessageDialog(this, "Community deleted successfully", "Success", HEIGHT);

                populateTable();

                conn.close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, "sjkd", HEIGHT);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JComboBox<String> cityMenu;
    private javax.swing.JTextField communityField;
    private javax.swing.JLabel communityLabel;
    private javax.swing.JTable communityTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField postalCodeField;
    private javax.swing.JLabel postalCodeLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables

    private void populateCityMenu() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/hms", "root", "Info5100");

            String sql = "select * from citydirectory";

            PreparedStatement ptst = conn.prepareStatement(sql);
            ResultSet rs = ptst.executeQuery();
            while (rs.next()) {
                cityMenu.addItem(rs.getString("Name"));
            }

            conn.close();

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(rootPane, e, "sjkd", HEIGHT);
            System.out.println(e);

        }
    }

    private void populateTable() {
        String city = String.valueOf(cityMenu.getSelectedItem());

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/community_directory", "root", "Info5100");

            String sql = "select * from " + city.replaceAll("[^a-zA-Z0-9]+", "_") + "_communities";

            PreparedStatement ptst = conn.prepareStatement(sql);
            ResultSet rs = ptst.executeQuery();
            DefaultTableModel model = (DefaultTableModel) communityTable.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                Object o[] = {rs.getString("Name"),
                    rs.getString("PostalCode")};
                model.addRow(o);
            }

            conn.close();

        } catch (Exception e) {
//            JOptionPane.showMessageDialog(rootPane, e, "sjkd", HEIGHT);
            System.out.println(e);

        }
    }

    private void setLabel() {

        String city = String.valueOf(cityMenu.getSelectedItem());
        titleLabel.setText("These are all communities in " + city);
    }

    private boolean validateUpdate() {
        boolean b = false;
        if (communityField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(aPanel, "Please enter community name", "Error", HEIGHT);
            communityField.requestFocus();
        } else if (postalCodeField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(aPanel, "Please enter postal code", "Error", HEIGHT);
            postalCodeField.requestFocus();
        } else {
            b = true;
        }
        return b;
    }

    private void clearFields() {

        communityField.setText("");
        postalCodeField.setText("");
    }

    private boolean validateAddition() {

        boolean b = false;
        if (communityField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(aPanel, "Please enter community name", "Error", HEIGHT);
            communityField.requestFocus();
        } else if (postalCodeField.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(aPanel, "Please enter postal code", "Error", HEIGHT);
            postalCodeField.requestFocus();
        } else {
            b = true;
        }
        return b;
    }
}
